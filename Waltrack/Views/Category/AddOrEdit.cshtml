@model Waltrack.Models.Category

@{
    ViewData["PageTitle"] = Model.CategoryId == 0 ? "Create a new category" : "Edit category";
}

<div class="row">
    <!-- Left Form Panel -->
    <div class="col-md-7">
        <div class="widget p-5" style="background-color:#212b36; border-radius:1rem;">
            <form asp-action="AddOrEdit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" name="CategoryId" value="@Model.CategoryId" />
                <input type="hidden" name="Icon" id="hiddenIcon" value="@Model.Icon" />

                <!-- Category Type -->
                <div class="mb-3">
                    <div class='e-btn-group custom-rbt-group'>
                        <input type="radio" id="radioExpense" name="Type" value="Expense" checked="@(Model.Type == "Expense")" />
                        <label class="e-btn" for="radioExpense">Expense</label>

                        <input type="radio" id="radioIncome" name="Type" value="Income" checked="@(Model.Type == "Income")" />
                        <label class="e-btn" for="radioIncome">Income</label>
                    </div>
                    <span asp-validation-for="Type" class="text-danger"></span>
                </div>

                <!-- Category Title -->
                <div class="mb-3">
                    <ejs-textbox id="title" placeholder="Title" ejs-for="Title" floatLabelType="Always"></ejs-textbox>
                    <span asp-validation-for="Title" class="text-danger fs-6"></span>
                </div>

                <!-- Category Emoji Input (like the title input) -->
                <div class="mb-3 position-relative">
                    <label for="emojiInput" class="form-label text-white">Icon</label>
                    <input type="text" id="emojiInput" readonly
                           class="form-control"
                           placeholder="Select an emoji"
                           value="@Model.Icon"
                           style="border-radius:1rem; background:#1a222b; color:white; padding:0.75rem 1rem; cursor:pointer;" />

                    <div id="emojiPickerContainer" style="display:none; position:absolute; z-index:10; top:3.5rem; left:0; border:1px solid #444; border-radius:1rem; overflow:hidden; background:#212b36;">
                        <emoji-picker id="emojiPicker" style="width:100%; height:250px;" categories="people,animals,food,activities" search></emoji-picker>
                    </div>
                    <span asp-validation-for="Icon" class="text-danger fs-6"></span>
                </div>

                <!-- Submit Button -->
                <ejs-button id="submit" type="submit" content="Submit" cssClass="e-success"></ejs-button>
            </form>
        </div>
    </div>

    <!-- Right Dynamic Preview Panel -->
    <div class="col-md-5">
        <div class="widget h-100 d-flex flex-column justify-content-center align-items-center" style="background-color:#1a222b; border-radius:1rem;">
            <!-- Emoji Preview -->
            <div id="emojiPreview" class="mb-3" style="font-size:5rem; transition: transform 0.3s ease;">
                @(Model.Icon ?? "❓")
            </div>

            <!-- Title Preview -->
            <div id="titlePreview" class="text-center text-white fs-5">
                @(Model.Title ?? "Category Title")
            </div>

            <!-- Type Label -->
            <div id="typePreview" class="text-center text-muted mt-2">
                @(Model.Type ?? "Category Type")
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1/index.js"></script>

    <script type="module">
        const emojiInput = document.getElementById('emojiInput');
        const emojiPickerContainer = document.getElementById('emojiPickerContainer');
        const emojiPicker = document.getElementById('emojiPicker');
        const hiddenIcon = document.getElementById('hiddenIcon');
        const emojiPreview = document.getElementById('emojiPreview');

        const titleInput = document.getElementById('title');
        const titlePreview = document.getElementById('titlePreview');
        const typeRadios = document.querySelectorAll('input[name="Type"]');
        const typePreview = document.getElementById('typePreview');

        // Toggle emoji picker on input click
        emojiInput.addEventListener('click', () => {
            emojiPickerContainer.style.display = emojiPickerContainer.style.display === 'none' ? 'block' : 'none';
        });

        // Update emoji live when selected
        emojiPicker.addEventListener('emoji-click', (event) => {
            const emoji = event.detail.unicode;
            emojiInput.value = emoji;
            emojiPreview.innerText = emoji;
            hiddenIcon.value = emoji;

            // Animate preview
            emojiPreview.style.transform = "scale(1.3)";
            setTimeout(() => emojiPreview.style.transform = "scale(1)", 200);

            // Close picker
            emojiPickerContainer.style.display = 'none';
        });

        // Update title live
        titleInput.addEventListener('input', () => {
            titlePreview.innerText = titleInput.value.trim() || "Category Title";
        });

        // Update type label and color based on type
        typeRadios.forEach(radio => {
            radio.addEventListener('change', () => {
                typePreview.innerText = radio.value;
                emojiPreview.style.color = radio.value === 'Income' ? '#4caf50' : '#FF6347';
                emojiPreview.style.transform = "scale(1.3)";
                setTimeout(() => emojiPreview.style.transform = "scale(1)", 200);
            });
        });
    </script>
}
